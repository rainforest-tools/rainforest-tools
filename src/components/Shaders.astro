---
---

<div>
    28 - Shaders
    <canvas id='webgl-28' class='webgl w-full h-max'></canvas>
</div>
<script>
    import * as THREE from 'three';
    import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';
    import GUI from 'lil-gui';

    // Debug
    const gui = new GUI();

    // Canvas
    const canvas =
        (document.querySelector('canvas#webgl-28') as HTMLElement) ?? undefined;
    const sizes = {
        width: canvas?.clientWidth ?? 800,
        height: canvas?.clientWidth ? (canvas?.clientWidth / 800) * 600 : 600,
    };

    // Scene
    const scene = new THREE.Scene();

    // Textures
    const textureLoader = new THREE.TextureLoader();

    // Geometry
    const geometry = new THREE.PlaneGeometry(1, 1, 32, 32);

    // Material
    const material = new THREE.RawShaderMaterial({
        vertexShader: `
            uniform mat4 projectionMatrix;
            uniform mat4 viewMatrix;
            uniform mat4 modelViewMatrix;

            attribute vec3 position;

            void main() {
                gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
            }
        `,
        fragmentShader: `
             precision mediump float;

             void main() {
                 gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
             }
        `,
    });

    // Mesh
    const mesh = new THREE.Mesh(geometry, material);
    scene.add(mesh);

    // Camera
    const camera = new THREE.PerspectiveCamera(
        75,
        sizes.width / sizes.height,
        0.1,
        100
    );
    camera.position.set(0.25, -0.25, 1);
    scene.add(camera);

    // Controls
    const controls = new OrbitControls(camera, canvas);
    controls.enableDamping = true;

    // Renderer
    const renderer = new THREE.WebGLRenderer({
        canvas: canvas,
    });
    renderer.setSize(sizes.width, sizes.height);
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));

    // Animate
    const clock = new THREE.Clock();

    const tick = () => {
        const elapsedTime = clock.getElapsedTime();

        // Update controls
        controls.update();

        // Render
        renderer.render(scene, camera);

        // Call tick again on the next frame
        window.requestAnimationFrame(tick);
    };

    tick();
</script>
