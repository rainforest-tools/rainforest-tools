---
---

<div>
    28 - Shaders
    <canvas id='webgl-28' class='webgl w-full h-max'></canvas>
</div>
<script>
    import * as THREE from 'three';
    import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';
    import GUI from 'lil-gui';

    import vertexShader from '@/shaders/28/vertex.glsl';
    import fragmentShader from '@/shaders/28/fragment.glsl';

    // Debug
    const gui = new GUI();

    // Canvas
    const canvas =
        (document.querySelector('canvas#webgl-28') as HTMLElement) ?? undefined;
    const sizes = {
        width: canvas?.clientWidth ?? 800,
        height: canvas?.clientWidth ? (canvas?.clientWidth / 800) * 600 : 600,
    };

    // Scene
    const scene = new THREE.Scene();

    // Textures
    const textureLoader = new THREE.TextureLoader();
    const flagTexture = textureLoader.load('/textures/flag-french.jpg');

    // Geometry
    const geometry = new THREE.PlaneGeometry(1, 1, 32, 32);

    // Material
    const material = new THREE.ShaderMaterial({
        vertexShader,
        fragmentShader,
        uniforms: {
            uFrequency: { value: new THREE.Vector2(10, 5) },
            uTime: { value: 0 },
            uColor: { value: new THREE.Color('teal') },
            uTexture: { value: flagTexture },
        },
        side: THREE.DoubleSide,
    });

    gui.add(material.uniforms.uFrequency.value, 'x')
        .min(0)
        .max(20)
        .step(0.01)
        .name('frequencyX');

    gui.add(material.uniforms.uFrequency.value, 'y')
        .min(0)
        .max(20)
        .step(0.01)
        .name('frequencyY');

    // Mesh
    const mesh = new THREE.Mesh(geometry, material);
    mesh.scale.y = 2 / 3;
    scene.add(mesh);

    // Camera
    const camera = new THREE.PerspectiveCamera(
        75,
        sizes.width / sizes.height,
        0.1,
        100
    );
    camera.position.set(0.25, -0.25, 1);
    scene.add(camera);

    // Controls
    const controls = new OrbitControls(camera, canvas);
    controls.enableDamping = true;

    // Renderer
    const renderer = new THREE.WebGLRenderer({
        canvas: canvas,
    });
    renderer.setSize(sizes.width, sizes.height);
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));

    // Animate
    const clock = new THREE.Clock();

    const tick = () => {
        const elapsedTime = clock.getElapsedTime();

        material.uniforms.uTime.value = elapsedTime;

        // Update controls
        controls.update();

        // Render
        renderer.render(scene, camera);

        // Call tick again on the next frame
        window.requestAnimationFrame(tick);
    };

    tick();
</script>
